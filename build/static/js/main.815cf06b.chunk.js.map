{"version":3,"sources":["components/Planet.jsx","App.js","serviceWorker.js","index.js","assets/img/earth-map.svg","assets/img/station.png"],"names":["Planet","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","src","planet","alt","style","marginLeft","concat","longitude","station","top","latitude","Component","App","_this","componentDidMount","console","log","state","distance","setInterval","fetchData","fetch","then","response","json","data","setStationInfo","element","latitudeValue","parseFloat","iss_position","toFixed","longitudeValue","setState","currentTime","setTime","stationSpeed","setVelocity","setDistance","Math","cos","PI","b","velocity","sqrt","parseInt","latitudeSpeed","longitudeSpeed","abs","date","Date","timestamp","toLocaleString","Planet_Planet","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.815cf06b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport planet from '../assets/img/earth-map.svg';\nimport station from '../assets/img/station.png';\nimport './Planet.css';\n\nexport default class Planet extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"planet-box\">\n\t\t\t\t\t<img src={planet} alt=\"planet earth\" style={{ marginLeft: `calc(-105% + ${(this.props.longitude * -0.55)}%)` }} className=\"planet\" />\n\t\t\t\t\t<img src={station} style={{ top: `calc(50% + ${(this.props.latitude / -1.8)}%)` }} className=\"station\" alt=\"iss-station\" />\n\t\t\t\t\t<div className=\"planet-shadow\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Planet from \"./components/Planet\"\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      distance: 5\n    }\n  }\n  componentDidMount = () => {\n    console.log(this.state.distance)\n    setInterval(() => {\n      this.fetchData()\n    }, 1000);\n  }\n\n  fetchData = () => {\n    fetch(\"http://api.open-notify.org/iss-now.json?callback\")\n      .then(response => response.json())\n      .then(data => this.setStationInfo(data)\n      );\n  }\n  setStationInfo = (element) => {\n    let latitudeValue = parseFloat(element.iss_position.latitude).toFixed(2);\n    let longitudeValue = parseFloat(element.iss_position.longitude).toFixed(2);\n    this.setState({\n      currentTime: this.setTime(element),\n      stationSpeed: this.setVelocity(element),\n      latitude: latitudeValue,\n      longitude: longitudeValue,\n      distance: this.setDistance(element),\n    })\n  }\n\n  setVelocity = (element) => {\n    if (this.state.latitude && this.state.longitude) {\n      let earthWidth = 12756.274\n      let a = (parseFloat(element.iss_position.longitude - this.state.longitude).toFixed(2) * Math.cos(element.iss_position.latitude * Math.PI / 180));\n      let b = parseFloat(this.state.latitude - element.iss_position.latitude).toFixed(2);\n      let velocity = Math.sqrt(a * a + b * b) * Math.PI * earthWidth / 360 * 3600;\n      return parseInt(velocity)\n    }\n  }\n\n  setDistance = (element) => {\n    if (this.state.latitude && this.state.longitude) {\n      console.log(this.state.distance)\n      let latitudeSpeed = parseFloat(element.iss_position.latitude - this.state.latitude).toFixed(2);\n      let longitudeSpeed = parseFloat(element.iss_position.longitude - this.state.longitude).toFixed(2);\n      latitudeSpeed = Math.abs(latitudeSpeed);\n      longitudeSpeed = Math.abs(longitudeSpeed);\n      let distance = parseInt(((longitudeSpeed * 100) + (latitudeSpeed * 100)) * 1.1) // value for one 0.01 according to https://en.wikipedia.org/wiki/Decimal_degrees\n      distance += this.state.distance;\n      return distance\n    }\n    else {\n      return 0\n    }\n  }\n\n  setTime = (element) => {\n    let date = new Date(element.timestamp * 1000);\n    date = date.toLocaleString();\n    return date\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"station-info\">\n          <span className='distance meter'>{this.state.distance} KM</span>\n          <span className='speed meter'>{this.state.stationSpeed} KM/H</span></div>\n        <span className=\"date\">{this.state.currentTime}</span>\n        <Planet latitude={this.state.latitude} longitude={this.state.longitude} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/earth-map.6dd445da.svg\";","module.exports = __webpack_public_path__ + \"static/media/station.520a24fc.png\";"],"sourceRoot":""}